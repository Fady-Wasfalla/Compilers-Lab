package lab_2;

import java.util.*;

public class NFA {
	
	
	
	
	public static void main(String[]args) {
		String inputNfa = "0,0;1,2;3,3#0,0;0,1;2,3;3,3#1,2;2,3;3,4;4,2;2,1#3";
		String statesNames = inputNfa.replaceAll("\\D+","");
		
		
		Hashtable<String, State> nfaStates = new Hashtable<String, State>();
		
		String[] transitions = inputNfa.split("#",0);
		String[] zeroTransitions = transitions[0].split(";",0);
		String[] oneTransitions = transitions[1].split(";",0);
		String[] epsilonTransitions = transitions[2].split(";",0);
		String goals = transitions[3];
		
		// initialize the states 
		for (int i=0;i<statesNames.length();i++) {
			if ( nfaStates.get(statesNames.charAt(i)) == null) {
				Hashtable <String, String> epsilonTrans = new Hashtable <String, String>();
				epsilonTrans.put("epsilon", ""+statesNames.charAt(i)); // add the state to itself as an epsilon transition state
				epsilonTrans.put("zero", "");
				epsilonTrans.put("one", "");
				Boolean stateGoal = true;
				if (goals.indexOf(statesNames.charAt(i)) == -1) { // check if the state is goal
					stateGoal=false;
				}
				State temp = new State(""+statesNames.charAt(i),epsilonTrans,stateGoal);
				nfaStates.put(temp.name, temp);
			}
		}
		

		nfaStates.forEach((k,v)->{
			for (int i=0;i<v.transitions.get("epsilon").length();i++) {
				for (int j=0;j<epsilonTransitions.length;j++) {
					//check if the transition in each state has another transitions EX : 1->2 , 2->3 
					String currentTrans = v.transitions.get("epsilon");
					if( currentTrans.charAt(i) == epsilonTransitions[j].charAt(0) ) {
						if ( currentTrans.indexOf(epsilonTransitions[j].charAt(2)) == -1 )	{
							v.transitions.replace("epsilon",currentTrans+epsilonTransitions[j].charAt(2));
							nfaStates.replace(k, v);
							i=0;
							j=0;
						}
					}
				}
			}
			nfaStates.replace(k, v);
		});
		
		nfaStates.forEach((k,v)->{
			System.out.println(v.name+" => "+v.transitions.get("epsilon"));
		});
		
	}
		
}
	
	

